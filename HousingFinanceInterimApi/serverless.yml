service: housing-finance-interim-api
provider:
  name: aws
  timeout: 300
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100
  environment:
    CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
    GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-application-credentials-json}

package:
  artifact: ./bin/release/netcoreapp3.1/housing-finance-interim-api.zip

functions:
  baseApi:
    name: ${self:service}-${self:provider.stage}
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            arn: ${ssm:/api-authenticator/${self:provider.stage}/arn}
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            managedExternally: true
          cors: true
  checkCashFiles:
    name: ${self:service}-${self:provider.stage}-check-cash-files
    description: "The scheduler to check if exists cash files and start cash files step function. Run at 01:00 AM, 07:00 AM, 01:00 PM and 07:00 PM"
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::CheckCashFiles  
  importCashFile:
    name: ${self:service}-${self:provider.stage}-cash-file
    description: "The scheduler to import cash files from Google drives."
    timeout: 900
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportCashFile
    role: lambdaExecutionRole
  importCashFileTransactions:
    name: ${self:service}-${self:provider.stage}-cash-file-trans
    description: "The scheduler to import cash files transactions from Cash File table."
    timeout: 600
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::LoadCashFileTransactions
    role: lambdaExecutionRole 
  refreshManageArrearsTables:
    name: ${self:service}-${self:provider.stage}-refresh-ma-scheduled
    description: "The scheduler to refresh manager arrears from the Google spreadsheet tables."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::RefreshManageArrearsTable
    role: lambdaExecutionRole    
    events:
      - schedule: cron(0 20 * * ? *)
stepFunctions:
  stateMachines:
    hfstepfunccashfile:
      name: HFCashFileStateMachine
      events:
        - schedule: cron(0 1,7,13,19 * * ? *)
      definition:
        Comment: "Cash files process step function deployed via serverless"
        StartAt: CheckCashFiles
        States:
          CheckCashFiles:
            Type: Task
            Resource:
              Fn::GetAtt: [ checkCashFiles, Arn ]
            Retry:
              - ErrorEquals:
                  - States.All
                IntervalSeconds: 30
                MaxAttempts: 3
                BackoffRate: 2
            Next: Wait_1
          Wait_1:
              Type: Wait
              TimestampPath: $.NextStepTime
              Next: Choice_1
          Choice_1:
            Type: Choice
            Choices:
              - Variable: $.Continue
                BooleanEquals: true
                Next: ImportCashFile
              - Variable: $.Continue
                BooleanEquals: false
                Next: ImportCashFileTransactions
          ImportCashFile:
            Type: Task
            Resource:
              Fn::GetAtt: [ importCashFile, Arn ]
            Retry:
              - ErrorEquals:
                  - States.All
                IntervalSeconds: 30
                MaxAttempts: 3
                BackoffRate: 2
            Next: Wait_2
          Wait_2:
            Type: Wait
            TimestampPath: $.NextStepTime
            Next: ImportCashFileTransactions
          ImportCashFileTransactions:
            Type: Task
            Resource:
              Fn::GetAtt: [ importCashFileTransactions, Arn ]
            Retry:
              - ErrorEquals:
                  - States.All
                IntervalSeconds: 30
                MaxAttempts: 3
                BackoffRate: 2
            Next: EndStep
          EndStep:
            Type: Succeed
      dependsOn: lambdaExecutionRole
      tags:
        Team: HousingFinance
resources:  
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    development:
      securityGroupIds:
        - sg-00d2e14f38245dd0b
      subnetIds:
        - subnet-0140d06fb84fdb547
        - subnet-05ce390ba88c42bfd
    staging:
      securityGroupIds:
        - sg-00c197e980177983d
      subnetIds:
        - subnet-0743d86e9b362fa38
        - subnet-0ea0020a44b98a2ca
    production:
      securityGroupIds:
        - sg-02a377899622e884c
      subnetIds:
        - subnet-0beb266003a56ca82
        - subnet-06a697d86a9b6ed01

plugins:
  - serverless-step-functions
