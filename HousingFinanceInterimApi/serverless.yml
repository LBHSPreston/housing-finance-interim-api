service: housing-finance-interim-api
provider:
  name: aws
  timeout: 300
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/netcoreapp3.1/your-api-name.zip

functions:
  baseApi:
    name: ${self:service}-${self:provider.stage}
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
# TODO: Create ssm variables for this API's postgres mirror then rename base-api below to match api name
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
  importFiles:
    name: ${self:service}-${self:provider.stage}-scheduled
    description: "The scheduler to import finance files from Google drives."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportFiles
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importHousingFiles:
    name: ${self:service}-${self:provider.stage}-housing-scheduled
    description: "The scheduler to import housing files from Google drives."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportHousingFiles
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importRentBreakdowns:
    name: ${self:service}-${self:provider.stage}-rent-breakdown-scheduled
    description: "The scheduler to import rent breakdown data from the Google spreadsheet."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportRentBreakdowns
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importRentPositions:
    name: ${self:service}-${self:provider.stage}-rent-position-scheduled
    description: "The scheduler to import current rent position data from the Google spreadsheet."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportRentPositions
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importServiceChargePaymentsReceived:
    name: ${self:service}-${self:provider.stage}-service-charge-payments-received-scheduled
    description: "The scheduler to import service charge payments received data from the Google spreadsheet."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportServiceChargePaymentsReceived
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importLeaseholdAccounts:
    name: ${self:service}-${self:provider.stage}-leasehold-accounts-scheduled
    description: "The scheduler to import leasehold accounts data from the Google spreadsheet."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportLeaseholdAccounts
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
  importGarage:
    name: ${self:service}-${self:provider.stage}-garage-pos-scheduled
    description: "The scheduler to import garage position data from the Google spreadsheet."
    handler: HousingFinanceInterimApi::HousingFinanceInterimApi.Handler::ImportGarage
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Data Source=${ssm:/housing-finance/${self:provider.stage}/db-host},${ssm:/housing-finance/${self:provider.stage}/db-port};Initial Catalog=${ssm:/housing-finance/${self:provider.stage}/db-database};Integrated Security=False;User Id=${ssm:/housing-finance/${self:provider.stage}/db-username};Password=${ssm:/housing-finance/${self:provider.stage}/db-password};Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;
      GOOGLE_API_KEY: ${ssm:/housing-finance/${self:provider.stage}/google-api-key}
    events:
      - schedule: cron(0 19 * * ? *)
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    development:
      securityGroupIds:
        - sg-00d2e14f38245dd0b
      subnetIds:
        - subnet-0140d06fb84fdb547
        - subnet-05ce390ba88c42bfd
    staging:
      securityGroupIds:
        - sg-00c197e980177983d
      subnetIds:
        - subnet-0743d86e9b362fa38
        - subnet-0ea0020a44b98a2ca
    production:
      securityGroupIds:
        - sg-02a377899622e884c
      subnetIds:
        - subnet-0beb266003a56ca82
        - subnet-06a697d86a9b6ed01
